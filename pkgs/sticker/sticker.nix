# Generated by carnix 0.10.2: /home/daniel/.cargo/bin/carnix generate-nix --standalone --src .
{ lib, buildRustCrate, buildRustCrateHelpers, callPackage }:

with buildRustCrateHelpers;
let inherit (lib.lists) fold;
    inherit (lib.attrsets) recursiveUpdate;
  cratesIO = (callPackage ./crates-io.nix { });
in
rec {
  crates = cratesIO // rec {
# sticker-0.6.1

    crates.sticker."0.6.1" = deps: { features?(features_."sticker"."0.6.1" deps {}) }: buildRustCrate {
      crateName = "sticker";
      version = "0.6.1";
      description = "Neural sequence labeler";
      homepage = "https://github.com/danieldk/sticker";
      authors = [ "Daniël de Kok <me@danieldk.eu>" ];
      edition = "2018";
      src = include [ "Cargo.toml" " sticker" ] ./.;
      workspace_member = "sticker";
      dependencies = mapFeatures features ([
        (cratesIO.crates."conllx"."${deps."sticker"."0.6.1"."conllx"}" deps)
        (cratesIO.crates."failure"."${deps."sticker"."0.6.1"."failure"}" deps)
        (cratesIO.crates."finalfusion"."${deps."sticker"."0.6.1"."finalfusion"}" deps)
        (cratesIO.crates."itertools"."${deps."sticker"."0.6.1"."itertools"}" deps)
        (cratesIO.crates."ndarray"."${deps."sticker"."0.6.1"."ndarray"}" deps)
        (cratesIO.crates."ndarray_tensorflow"."${deps."sticker"."0.6.1"."ndarray_tensorflow"}" deps)
        (cratesIO.crates."ordered_float"."${deps."sticker"."0.6.1"."ordered_float"}" deps)
        (cratesIO.crates."petgraph"."${deps."sticker"."0.6.1"."petgraph"}" deps)
        (cratesIO.crates."protobuf"."${deps."sticker"."0.6.1"."protobuf"}" deps)
        (cratesIO.crates."serde"."${deps."sticker"."0.6.1"."serde"}" deps)
        (cratesIO.crates."serde_derive"."${deps."sticker"."0.6.1"."serde_derive"}" deps)
        (crates."sticker_tf_proto"."${deps."sticker"."0.6.1"."sticker_tf_proto"}" deps)
        (cratesIO.crates."tensorflow"."${deps."sticker"."0.6.1"."tensorflow"}" deps)
      ]);
    };
    features_."sticker"."0.6.1" = deps: f: updateFeatures f (rec {
      conllx."${deps.sticker."0.6.1".conllx}".default = true;
      failure."${deps.sticker."0.6.1".failure}".default = true;
      finalfusion."${deps.sticker."0.6.1".finalfusion}".default = true;
      itertools."${deps.sticker."0.6.1".itertools}".default = true;
      ndarray."${deps.sticker."0.6.1".ndarray}".default = true;
      ndarray_tensorflow."${deps.sticker."0.6.1".ndarray_tensorflow}".default = true;
      ordered_float."${deps.sticker."0.6.1".ordered_float}".default = true;
      petgraph."${deps.sticker."0.6.1".petgraph}".default = true;
      protobuf."${deps.sticker."0.6.1".protobuf}".default = true;
      serde."${deps.sticker."0.6.1".serde}".default = true;
      serde_derive."${deps.sticker."0.6.1".serde_derive}".default = true;
      sticker."0.6.1".default = (f.sticker."0.6.1".default or true);
      sticker_tf_proto."${deps.sticker."0.6.1".sticker_tf_proto}".default = true;
      tensorflow."${deps.sticker."0.6.1".tensorflow}".default = true;
    }) [
      (if deps."sticker"."0.6.1" ? "conllx" then cratesIO.features_.conllx."${deps."sticker"."0.6.1"."conllx" or ""}" deps else {})
      (if deps."sticker"."0.6.1" ? "failure" then cratesIO.features_.failure."${deps."sticker"."0.6.1"."failure" or ""}" deps else {})
      (if deps."sticker"."0.6.1" ? "finalfusion" then cratesIO.features_.finalfusion."${deps."sticker"."0.6.1"."finalfusion" or ""}" deps else {})
      (if deps."sticker"."0.6.1" ? "itertools" then cratesIO.features_.itertools."${deps."sticker"."0.6.1"."itertools" or ""}" deps else {})
      (if deps."sticker"."0.6.1" ? "ndarray" then cratesIO.features_.ndarray."${deps."sticker"."0.6.1"."ndarray" or ""}" deps else {})
      (if deps."sticker"."0.6.1" ? "ndarray_tensorflow" then cratesIO.features_.ndarray_tensorflow."${deps."sticker"."0.6.1"."ndarray_tensorflow" or ""}" deps else {})
      (if deps."sticker"."0.6.1" ? "ordered_float" then cratesIO.features_.ordered_float."${deps."sticker"."0.6.1"."ordered_float" or ""}" deps else {})
      (if deps."sticker"."0.6.1" ? "petgraph" then cratesIO.features_.petgraph."${deps."sticker"."0.6.1"."petgraph" or ""}" deps else {})
      (if deps."sticker"."0.6.1" ? "protobuf" then cratesIO.features_.protobuf."${deps."sticker"."0.6.1"."protobuf" or ""}" deps else {})
      (if deps."sticker"."0.6.1" ? "serde" then cratesIO.features_.serde."${deps."sticker"."0.6.1"."serde" or ""}" deps else {})
      (if deps."sticker"."0.6.1" ? "serde_derive" then cratesIO.features_.serde_derive."${deps."sticker"."0.6.1"."serde_derive" or ""}" deps else {})
      (if deps."sticker"."0.6.1" ? "sticker_tf_proto" then features_.sticker_tf_proto."${deps."sticker"."0.6.1"."sticker_tf_proto" or ""}" deps else {})
      (if deps."sticker"."0.6.1" ? "tensorflow" then cratesIO.features_.tensorflow."${deps."sticker"."0.6.1"."tensorflow" or ""}" deps else {})
    ];


# end
# sticker-tf-proto-0.6.0

    crates.sticker_tf_proto."0.6.0" = deps: { features?(features_."sticker_tf_proto"."0.6.0" deps {}) }: buildRustCrate {
      crateName = "sticker-tf-proto";
      version = "0.6.0";
      description = "Tensorflow protocol buffer definitions used by sticker";
      homepage = "https://github.com/danieldk/sticker";
      authors = [ "Daniël de Kok <me@danieldk.eu>" ];
      edition = "2018";
      src = include [ "Cargo.toml" " sticker-tf-proto" ] ./.;
      workspace_member = "sticker-tf-proto";
      dependencies = mapFeatures features ([
        (cratesIO.crates."protobuf"."${deps."sticker_tf_proto"."0.6.0"."protobuf"}" deps)
      ]);

      buildDependencies = mapFeatures features ([
      ]
        ++ (if features.sticker_tf_proto."0.6.0".protoc-rust or false then [ (cratesIO.crates.protoc_rust."${deps."sticker_tf_proto"."0.6.0".protoc_rust}" deps) ] else []));
      features = mkFeatures (features."sticker_tf_proto"."0.6.0" or {});
    };
    features_."sticker_tf_proto"."0.6.0" = deps: f: updateFeatures f (rec {
      protobuf."${deps.sticker_tf_proto."0.6.0".protobuf}".default = true;
      sticker_tf_proto = fold recursiveUpdate {} [
        { "0.6.0"."protoc-rust" =
          (f.sticker_tf_proto."0.6.0"."protoc-rust" or false) ||
          (f.sticker_tf_proto."0.6.0"."proto-compile" or false) ||
          (sticker_tf_proto."0.6.0"."proto-compile" or false); }
        { "0.6.0".default = (f.sticker_tf_proto."0.6.0".default or true); }
      ];
    }) [
      (f: if deps."sticker_tf_proto"."0.6.0" ? "protoc_rust" then recursiveUpdate f { protoc_rust."${deps."sticker_tf_proto"."0.6.0"."protoc_rust"}"."default" = true; } else f)
      (if deps."sticker_tf_proto"."0.6.0" ? "protobuf" then cratesIO.features_.protobuf."${deps."sticker_tf_proto"."0.6.0"."protobuf" or ""}" deps else {})
      (if deps."sticker_tf_proto"."0.6.0" ? "protoc_rust" then cratesIO.features_.protoc_rust."${deps."sticker_tf_proto"."0.6.0"."protoc_rust" or ""}" deps else {})
    ];


# end
# sticker-utils-0.6.1

    crates.sticker_utils."0.6.1" = deps: { features?(features_."sticker_utils"."0.6.1" deps {}) }: buildRustCrate {
      crateName = "sticker-utils";
      version = "0.6.1";
      description = "Neural sequence labeler (utilities)";
      homepage = "https://github.com/danieldk/sticker";
      authors = [ "Daniël de Kok <me@danieldk.eu>" ];
      edition = "2018";
      src = include [ "Cargo.toml" " sticker-utils" ] ./.;
      workspace_member = "sticker-utils";
      dependencies = mapFeatures features ([
        (cratesIO.crates."clap"."${deps."sticker_utils"."0.6.1"."clap"}" deps)
        (cratesIO.crates."conllx"."${deps."sticker_utils"."0.6.1"."conllx"}" deps)
        (cratesIO.crates."failure"."${deps."sticker_utils"."0.6.1"."failure"}" deps)
        (cratesIO.crates."finalfusion"."${deps."sticker_utils"."0.6.1"."finalfusion"}" deps)
        (cratesIO.crates."indicatif"."${deps."sticker_utils"."0.6.1"."indicatif"}" deps)
        (cratesIO.crates."ordered_float"."${deps."sticker_utils"."0.6.1"."ordered_float"}" deps)
        (cratesIO.crates."serde"."${deps."sticker_utils"."0.6.1"."serde"}" deps)
        (cratesIO.crates."serde_cbor"."${deps."sticker_utils"."0.6.1"."serde_cbor"}" deps)
        (cratesIO.crates."serde_derive"."${deps."sticker_utils"."0.6.1"."serde_derive"}" deps)
        (cratesIO.crates."stdinout"."${deps."sticker_utils"."0.6.1"."stdinout"}" deps)
        (crates."sticker"."${deps."sticker_utils"."0.6.1"."sticker"}" deps)
        (cratesIO.crates."tensorflow"."${deps."sticker_utils"."0.6.1"."tensorflow"}" deps)
        (cratesIO.crates."threadpool"."${deps."sticker_utils"."0.6.1"."threadpool"}" deps)
        (cratesIO.crates."toml"."${deps."sticker_utils"."0.6.1"."toml"}" deps)
      ]);
    };
    features_."sticker_utils"."0.6.1" = deps: f: updateFeatures f (rec {
      clap."${deps.sticker_utils."0.6.1".clap}".default = true;
      conllx."${deps.sticker_utils."0.6.1".conllx}".default = true;
      failure."${deps.sticker_utils."0.6.1".failure}".default = true;
      finalfusion."${deps.sticker_utils."0.6.1".finalfusion}".default = true;
      indicatif."${deps.sticker_utils."0.6.1".indicatif}".default = true;
      ordered_float = fold recursiveUpdate {} [
        { "${deps.sticker_utils."0.6.1".ordered_float}"."serde" = true; }
        { "${deps.sticker_utils."0.6.1".ordered_float}".default = true; }
      ];
      serde."${deps.sticker_utils."0.6.1".serde}".default = true;
      serde_cbor."${deps.sticker_utils."0.6.1".serde_cbor}".default = true;
      serde_derive."${deps.sticker_utils."0.6.1".serde_derive}".default = true;
      stdinout."${deps.sticker_utils."0.6.1".stdinout}".default = true;
      sticker."${deps.sticker_utils."0.6.1".sticker}".default = true;
      sticker_utils."0.6.1".default = (f.sticker_utils."0.6.1".default or true);
      tensorflow."${deps.sticker_utils."0.6.1".tensorflow}".default = true;
      threadpool."${deps.sticker_utils."0.6.1".threadpool}".default = true;
      toml."${deps.sticker_utils."0.6.1".toml}".default = true;
    }) [
      (if deps."sticker_utils"."0.6.1" ? "clap" then cratesIO.features_.clap."${deps."sticker_utils"."0.6.1"."clap" or ""}" deps else {})
      (if deps."sticker_utils"."0.6.1" ? "conllx" then cratesIO.features_.conllx."${deps."sticker_utils"."0.6.1"."conllx" or ""}" deps else {})
      (if deps."sticker_utils"."0.6.1" ? "failure" then cratesIO.features_.failure."${deps."sticker_utils"."0.6.1"."failure" or ""}" deps else {})
      (if deps."sticker_utils"."0.6.1" ? "finalfusion" then cratesIO.features_.finalfusion."${deps."sticker_utils"."0.6.1"."finalfusion" or ""}" deps else {})
      (if deps."sticker_utils"."0.6.1" ? "indicatif" then cratesIO.features_.indicatif."${deps."sticker_utils"."0.6.1"."indicatif" or ""}" deps else {})
      (if deps."sticker_utils"."0.6.1" ? "ordered_float" then cratesIO.features_.ordered_float."${deps."sticker_utils"."0.6.1"."ordered_float" or ""}" deps else {})
      (if deps."sticker_utils"."0.6.1" ? "serde" then cratesIO.features_.serde."${deps."sticker_utils"."0.6.1"."serde" or ""}" deps else {})
      (if deps."sticker_utils"."0.6.1" ? "serde_cbor" then cratesIO.features_.serde_cbor."${deps."sticker_utils"."0.6.1"."serde_cbor" or ""}" deps else {})
      (if deps."sticker_utils"."0.6.1" ? "serde_derive" then cratesIO.features_.serde_derive."${deps."sticker_utils"."0.6.1"."serde_derive" or ""}" deps else {})
      (if deps."sticker_utils"."0.6.1" ? "stdinout" then cratesIO.features_.stdinout."${deps."sticker_utils"."0.6.1"."stdinout" or ""}" deps else {})
      (if deps."sticker_utils"."0.6.1" ? "sticker" then features_.sticker."${deps."sticker_utils"."0.6.1"."sticker" or ""}" deps else {})
      (if deps."sticker_utils"."0.6.1" ? "tensorflow" then cratesIO.features_.tensorflow."${deps."sticker_utils"."0.6.1"."tensorflow" or ""}" deps else {})
      (if deps."sticker_utils"."0.6.1" ? "threadpool" then cratesIO.features_.threadpool."${deps."sticker_utils"."0.6.1"."threadpool" or ""}" deps else {})
      (if deps."sticker_utils"."0.6.1" ? "toml" then cratesIO.features_.toml."${deps."sticker_utils"."0.6.1"."toml" or ""}" deps else {})
    ];


# end

  };

  sticker = crates.crates.sticker."0.6.1" deps;
  sticker_tf_proto = crates.crates.sticker_tf_proto."0.6.0" deps;
  sticker_utils = crates.crates.sticker_utils."0.6.1" deps;
  __all = [ (sticker {}) (sticker_tf_proto {}) (sticker_utils {}) ];
  deps.adler32."1.0.3" = {};
  deps.aho_corasick."0.7.6" = {
    memchr = "2.2.1";
  };
  deps.aligned_alloc."0.1.3" = {
    kernel32_sys = "0.2.2";
    libc = "0.2.62";
    winapi = "0.2.8";
  };
  deps.ansi_term."0.11.0" = {
    winapi = "0.3.7";
  };
  deps.approx."0.3.2" = {
    num_traits = "0.2.8";
  };
  deps.arrayvec."0.4.11" = {
    nodrop = "0.1.13";
  };
  deps.atty."0.2.13" = {
    libc = "0.2.62";
    winapi = "0.3.7";
  };
  deps.autocfg."0.1.5" = {};
  deps.backtrace."0.3.34" = {
    backtrace_sys = "0.1.31";
    cfg_if = "0.1.9";
    libc = "0.2.62";
    rustc_demangle = "0.1.16";
  };
  deps.backtrace_sys."0.1.31" = {
    libc = "0.2.62";
    cc = "1.0.40";
  };
  deps.bitflags."1.1.0" = {};
  deps.build_const."0.2.1" = {};
  deps.byteorder."1.3.2" = {};
  deps.c2_chacha."0.2.2" = {
    lazy_static = "1.3.0";
    ppv_lite86 = "0.2.5";
  };
  deps.cc."1.0.40" = {};
  deps.cfg_if."0.1.9" = {};
  deps.clap."2.33.0" = {
    atty = "0.2.13";
    bitflags = "1.1.0";
    strsim = "0.8.0";
    textwrap = "0.11.0";
    unicode_width = "0.1.5";
    vec_map = "0.8.1";
    ansi_term = "0.11.0";
  };
  deps.clicolors_control."1.0.0" = {
    lazy_static = "1.3.0";
    libc = "0.2.62";
    atty = "0.2.13";
    winapi = "0.3.7";
  };
  deps.cloudabi."0.0.3" = {
    bitflags = "1.1.0";
  };
  deps.conllx."0.11.2" = {
    failure = "0.1.5";
    itertools = "0.7.11";
    lazy_init = "0.3.0";
    petgraph = "0.4.13";
  };
  deps.console."0.7.7" = {
    atty = "0.2.13";
    clicolors_control = "1.0.0";
    lazy_static = "1.3.0";
    libc = "0.2.62";
    parking_lot = "0.9.0";
    regex = "1.2.1";
    unicode_width = "0.1.5";
    termios = "0.3.1";
    encode_unicode = "0.3.5";
    winapi = "0.3.7";
  };
  deps.crc."1.8.1" = {
    build_const = "0.2.1";
  };
  deps.crc32fast."1.2.0" = {
    cfg_if = "0.1.9";
  };
  deps.crossbeam_deque."0.6.3" = {
    crossbeam_epoch = "0.7.2";
    crossbeam_utils = "0.6.6";
  };
  deps.crossbeam_epoch."0.7.2" = {
    arrayvec = "0.4.11";
    cfg_if = "0.1.9";
    crossbeam_utils = "0.6.6";
    lazy_static = "1.3.0";
    memoffset = "0.5.1";
    scopeguard = "1.0.0";
  };
  deps.crossbeam_queue."0.1.2" = {
    crossbeam_utils = "0.6.6";
  };
  deps.crossbeam_utils."0.6.6" = {
    cfg_if = "0.1.9";
    lazy_static = "1.3.0";
  };
  deps.curl."0.4.22" = {
    curl_sys = "0.4.20";
    libc = "0.2.62";
    socket2 = "0.3.11";
    openssl_probe = "0.1.2";
    openssl_sys = "0.9.49";
    kernel32_sys = "0.2.2";
    schannel = "0.1.15";
    winapi = "0.2.8";
  };
  deps.curl_sys."0.4.20" = {
    libc = "0.2.62";
    libz_sys = "1.0.25";
    cc = "1.0.40";
    pkg_config = "0.3.15";
    openssl_sys = "0.9.49";
    winapi = "0.3.7";
  };
  deps.either."1.5.2" = {};
  deps.encode_unicode."0.3.5" = {};
  deps.failure."0.1.5" = {
    backtrace = "0.3.34";
    failure_derive = "0.1.5";
  };
  deps.failure_derive."0.1.5" = {
    proc_macro2 = "0.4.30";
    quote = "0.6.13";
    syn = "0.15.44";
    synstructure = "0.10.2";
  };
  deps.filetime."0.2.7" = {
    cfg_if = "0.1.9";
    redox_syscall = "0.1.56";
    libc = "0.2.62";
    winapi = "0.3.7";
  };
  deps.finalfusion."0.7.1" = {
    byteorder = "1.3.2";
    failure = "0.1.5";
    fnv = "1.0.6";
    itertools = "0.8.0";
    memmap = "0.7.0";
    ndarray = "0.12.1";
    ordered_float = "1.0.2";
    rand = "0.6.5";
    rand_xorshift = "0.1.1";
    reductive = "0.2.0";
    toml = "0.5.3";
  };
  deps.fixedbitset."0.1.9" = {};
  deps.flate2."1.0.9" = {
    crc32fast = "1.2.0";
    libc = "0.2.62";
    miniz_sys = "0.1.12";
    miniz_oxide_c_api = "0.2.3";
  };
  deps.fnv."1.0.6" = {};
  deps.fuchsia_cprng."0.1.1" = {};
  deps.getrandom."0.1.9" = {
    cfg_if = "0.1.9";
    libc = "0.2.62";
    wasi = "0.5.0";
  };
  deps.half."1.3.0" = {};
  deps.indicatif."0.11.0" = {
    console = "0.7.7";
    lazy_static = "1.3.0";
    number_prefix = "0.2.8";
    parking_lot = "0.9.0";
    regex = "1.2.1";
  };
  deps.itertools."0.7.11" = {
    either = "1.5.2";
  };
  deps.itertools."0.8.0" = {
    either = "1.5.2";
  };
  deps.kernel32_sys."0.2.2" = {
    winapi = "0.2.8";
    winapi_build = "0.1.1";
  };
  deps.lazy_init."0.3.0" = {};
  deps.lazy_static."1.3.0" = {};
  deps.libc."0.2.62" = {};
  deps.libz_sys."1.0.25" = {
    libc = "0.2.62";
    cc = "1.0.40";
    pkg_config = "0.3.15";
  };
  deps.lock_api."0.3.1" = {
    scopeguard = "1.0.0";
  };
  deps.log."0.4.8" = {
    cfg_if = "0.1.9";
  };
  deps.matrixmultiply."0.1.15" = {
    rawpointer = "0.1.0";
  };
  deps.memchr."2.2.1" = {};
  deps.memmap."0.7.0" = {
    libc = "0.2.62";
    winapi = "0.3.7";
  };
  deps.memoffset."0.5.1" = {
    rustc_version = "0.2.3";
  };
  deps.miniz_sys."0.1.12" = {
    libc = "0.2.62";
    cc = "1.0.40";
  };
  deps.miniz_oxide."0.3.2" = {
    adler32 = "1.0.3";
  };
  deps.miniz_oxide_c_api."0.2.3" = {
    crc32fast = "1.2.0";
    libc = "0.2.62";
    miniz_oxide = "0.3.2";
    cc = "1.0.40";
  };
  deps.ndarray."0.12.1" = {
    itertools = "0.7.11";
    matrixmultiply = "0.1.15";
    num_complex = "0.2.3";
    num_traits = "0.2.8";
  };
  deps.ndarray_parallel."0.9.0" = {
    ndarray = "0.12.1";
    rayon = "1.1.0";
  };
  deps.ndarray_tensorflow."0.2.0" = {
    ndarray = "0.12.1";
    tensorflow = "0.13.0";
  };
  deps.nodrop."0.1.13" = {};
  deps.num_complex."0.2.3" = {
    num_traits = "0.2.8";
    autocfg = "0.1.5";
  };
  deps.num_traits."0.2.8" = {
    autocfg = "0.1.5";
  };
  deps.num_cpus."1.10.1" = {
    libc = "0.2.62";
  };
  deps.number_prefix."0.2.8" = {
    num_traits = "0.2.8";
  };
  deps.openssl_probe."0.1.2" = {};
  deps.openssl_sys."0.9.49" = {
    libc = "0.2.62";
    autocfg = "0.1.5";
    cc = "1.0.40";
    pkg_config = "0.3.15";
  };
  deps.ordered_float."1.0.2" = {
    num_traits = "0.2.8";
    serde = "1.0.99";
  };
  deps.ordermap."0.3.5" = {};
  deps.parking_lot."0.9.0" = {
    lock_api = "0.3.1";
    parking_lot_core = "0.6.2";
    rustc_version = "0.2.3";
  };
  deps.parking_lot_core."0.6.2" = {
    cfg_if = "0.1.9";
    smallvec = "0.6.10";
    rustc_version = "0.2.3";
    cloudabi = "0.0.3";
    redox_syscall = "0.1.56";
    libc = "0.2.62";
    winapi = "0.3.7";
  };
  deps.petgraph."0.4.13" = {
    fixedbitset = "0.1.9";
    ordermap = "0.3.5";
  };
  deps.pkg_config."0.3.15" = {};
  deps.ppv_lite86."0.2.5" = {};
  deps.proc_macro2."0.4.30" = {
    unicode_xid = "0.1.0";
  };
  deps.proc_macro2."1.0.1" = {
    unicode_xid = "0.2.0";
  };
  deps.protobuf."2.8.0" = {};
  deps.protobuf_codegen."2.8.0" = {
    protobuf = "2.8.0";
  };
  deps.protoc."2.8.0" = {
    log = "0.4.8";
  };
  deps.protoc_rust."2.8.0" = {
    protobuf = "2.8.0";
    protobuf_codegen = "2.8.0";
    protoc = "2.8.0";
    tempfile = "3.1.0";
  };
  deps.quote."0.6.13" = {
    proc_macro2 = "0.4.30";
  };
  deps.quote."1.0.1" = {
    proc_macro2 = "1.0.1";
  };
  deps.rand."0.6.5" = {
    rand_chacha = "0.1.1";
    rand_core = "0.4.2";
    rand_hc = "0.1.0";
    rand_isaac = "0.1.1";
    rand_jitter = "0.1.4";
    rand_os = "0.1.3";
    rand_pcg = "0.1.2";
    rand_xorshift = "0.1.1";
    autocfg = "0.1.5";
    libc = "0.2.62";
    winapi = "0.3.7";
  };
  deps.rand."0.7.0" = {
    rand_core = "0.5.0";
    rand_chacha = "0.2.1";
    rand_hc = "0.2.0";
    libc = "0.2.62";
  };
  deps.rand_chacha."0.1.1" = {
    rand_core = "0.3.1";
    autocfg = "0.1.5";
  };
  deps.rand_chacha."0.2.1" = {
    c2_chacha = "0.2.2";
    rand_core = "0.5.0";
  };
  deps.rand_core."0.3.1" = {
    rand_core = "0.4.2";
  };
  deps.rand_core."0.4.2" = {};
  deps.rand_core."0.5.0" = {
    getrandom = "0.1.9";
  };
  deps.rand_hc."0.1.0" = {
    rand_core = "0.3.1";
  };
  deps.rand_hc."0.2.0" = {
    rand_core = "0.5.0";
  };
  deps.rand_isaac."0.1.1" = {
    rand_core = "0.3.1";
  };
  deps.rand_jitter."0.1.4" = {
    rand_core = "0.4.2";
    libc = "0.2.62";
    winapi = "0.3.7";
  };
  deps.rand_os."0.1.3" = {
    rand_core = "0.4.2";
    rdrand = "0.4.0";
    cloudabi = "0.0.3";
    fuchsia_cprng = "0.1.1";
    libc = "0.2.62";
    winapi = "0.3.7";
  };
  deps.rand_pcg."0.1.2" = {
    rand_core = "0.4.2";
    autocfg = "0.1.5";
  };
  deps.rand_xorshift."0.1.1" = {
    rand_core = "0.3.1";
  };
  deps.rawpointer."0.1.0" = {};
  deps.rayon."1.1.0" = {
    crossbeam_deque = "0.6.3";
    either = "1.5.2";
    rayon_core = "1.5.0";
  };
  deps.rayon_core."1.5.0" = {
    crossbeam_deque = "0.6.3";
    crossbeam_queue = "0.1.2";
    crossbeam_utils = "0.6.6";
    lazy_static = "1.3.0";
    num_cpus = "1.10.1";
  };
  deps.rdrand."0.4.0" = {
    rand_core = "0.3.1";
  };
  deps.redox_syscall."0.1.56" = {};
  deps.reductive."0.2.0" = {
    log = "0.4.8";
    ndarray = "0.12.1";
    ndarray_parallel = "0.9.0";
    num_traits = "0.2.8";
    ordered_float = "1.0.2";
    rand = "0.6.5";
    rand_xorshift = "0.1.1";
    rayon = "1.1.0";
  };
  deps.regex."1.2.1" = {
    aho_corasick = "0.7.6";
    memchr = "2.2.1";
    regex_syntax = "0.6.11";
    thread_local = "0.3.6";
  };
  deps.regex_syntax."0.6.11" = {};
  deps.remove_dir_all."0.5.2" = {
    winapi = "0.3.7";
  };
  deps.rustc_demangle."0.1.16" = {};
  deps.rustc_version."0.2.3" = {
    semver = "0.9.0";
  };
  deps.schannel."0.1.15" = {
    lazy_static = "1.3.0";
    winapi = "0.3.7";
  };
  deps.scopeguard."1.0.0" = {};
  deps.semver."0.9.0" = {
    semver_parser = "0.7.0";
  };
  deps.semver_parser."0.7.0" = {};
  deps.serde."1.0.99" = {};
  deps.serde_cbor."0.10.1" = {
    byteorder = "1.3.2";
    half = "1.3.0";
    serde = "1.0.99";
  };
  deps.serde_derive."1.0.99" = {
    proc_macro2 = "1.0.1";
    quote = "1.0.1";
    syn = "1.0.2";
  };
  deps.smallvec."0.6.10" = {};
  deps.socket2."0.3.11" = {
    cfg_if = "0.1.9";
    libc = "0.2.62";
    redox_syscall = "0.1.56";
    winapi = "0.3.7";
  };
  deps.stdinout."0.4.0" = {};
  deps.sticker."0.6.1" = {
    conllx = "0.11.2";
    failure = "0.1.5";
    finalfusion = "0.7.1";
    itertools = "0.8.0";
    ndarray = "0.12.1";
    ndarray_tensorflow = "0.2.0";
    ordered_float = "1.0.2";
    petgraph = "0.4.13";
    protobuf = "2.8.0";
    serde = "1.0.99";
    serde_derive = "1.0.99";
    sticker_tf_proto = "0.6.0";
    tensorflow = "0.13.0";
  };
  deps.sticker_tf_proto."0.6.0" = {
    protobuf = "2.8.0";
    protoc_rust = "2.8.0";
  };
  deps.sticker_utils."0.6.1" = {
    clap = "2.33.0";
    conllx = "0.11.2";
    failure = "0.1.5";
    finalfusion = "0.7.1";
    indicatif = "0.11.0";
    ordered_float = "1.0.2";
    serde = "1.0.99";
    serde_cbor = "0.10.1";
    serde_derive = "1.0.99";
    stdinout = "0.4.0";
    sticker = "0.6.1";
    tensorflow = "0.13.0";
    threadpool = "1.7.1";
    toml = "0.5.3";
  };
  deps.strsim."0.8.0" = {};
  deps.syn."0.15.44" = {
    proc_macro2 = "0.4.30";
    quote = "0.6.13";
    unicode_xid = "0.1.0";
  };
  deps.syn."1.0.2" = {
    proc_macro2 = "1.0.1";
    quote = "1.0.1";
    unicode_xid = "0.2.0";
  };
  deps.synstructure."0.10.2" = {
    proc_macro2 = "0.4.30";
    quote = "0.6.13";
    syn = "0.15.44";
    unicode_xid = "0.1.0";
  };
  deps.tar."0.4.26" = {
    filetime = "0.2.7";
    redox_syscall = "0.1.56";
    libc = "0.2.62";
    xattr = "0.2.2";
  };
  deps.tempfile."3.1.0" = {
    cfg_if = "0.1.9";
    rand = "0.7.0";
    remove_dir_all = "0.5.2";
    redox_syscall = "0.1.56";
    libc = "0.2.62";
    winapi = "0.3.7";
  };
  deps.tensorflow."0.13.0" = {
    aligned_alloc = "0.1.3";
    byteorder = "1.3.2";
    crc = "1.8.1";
    libc = "0.2.62";
    num_complex = "0.2.3";
    tensorflow_sys = "0.16.0";
  };
  deps.tensorflow_sys."0.16.0" = {
    libc = "0.2.62";
    curl = "0.4.22";
    flate2 = "1.0.9";
    pkg_config = "0.3.15";
    semver = "0.9.0";
    tar = "0.4.26";
  };
  deps.termios."0.3.1" = {
    libc = "0.2.62";
  };
  deps.textwrap."0.11.0" = {
    unicode_width = "0.1.5";
  };
  deps.thread_local."0.3.6" = {
    lazy_static = "1.3.0";
  };
  deps.threadpool."1.7.1" = {
    num_cpus = "1.10.1";
  };
  deps.toml."0.5.3" = {
    serde = "1.0.99";
  };
  deps.unicode_width."0.1.5" = {};
  deps.unicode_xid."0.1.0" = {};
  deps.unicode_xid."0.2.0" = {};
  deps.vcpkg."0.2.7" = {};
  deps.vec_map."0.8.1" = {};
  deps.wasi."0.5.0" = {};
  deps.winapi."0.2.8" = {};
  deps.winapi."0.3.7" = {
    winapi_i686_pc_windows_gnu = "0.4.0";
    winapi_x86_64_pc_windows_gnu = "0.4.0";
  };
  deps.winapi_build."0.1.1" = {};
  deps.winapi_i686_pc_windows_gnu."0.4.0" = {};
  deps.winapi_x86_64_pc_windows_gnu."0.4.0" = {};
  deps.xattr."0.2.2" = {
    libc = "0.2.62";
  };
}
